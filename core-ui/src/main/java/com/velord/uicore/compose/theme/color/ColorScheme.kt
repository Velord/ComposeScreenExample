package com.velord.uicore.compose.theme.color

import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.ui.graphics.Color


//primary: Color = ColorDarkTokens.Primary,
//onPrimary: Color = ColorDarkTokens.OnPrimary,
//primaryContainer: Color = ColorDarkTokens.PrimaryContainer,
//onPrimaryContainer: Color = ColorDarkTokens.OnPrimaryContainer,
//inversePrimary: Color = ColorDarkTokens.InversePrimary,
//secondary: Color = ColorDarkTokens.Secondary,
//onSecondary: Color = ColorDarkTokens.OnSecondary,
//secondaryContainer: Color = ColorDarkTokens.SecondaryContainer,
//onSecondaryContainer: Color = ColorDarkTokens.OnSecondaryContainer,
//tertiary: Color = ColorDarkTokens.Tertiary,
//onTertiary: Color = ColorDarkTokens.OnTertiary,
//tertiaryContainer: Color = ColorDarkTokens.TertiaryContainer,
//onTertiaryContainer: Color = ColorDarkTokens.OnTertiaryContainer,
//background: Color = ColorDarkTokens.Background,
//onBackground: Color = ColorDarkTokens.OnBackground,
//surface: Color = ColorDarkTokens.Surface,
//onSurface: Color = ColorDarkTokens.OnSurface,
//surfaceVariant: Color = ColorDarkTokens.SurfaceVariant,
//onSurfaceVariant: Color = ColorDarkTokens.OnSurfaceVariant,
//surfaceTint: Color = primary,
//inverseSurface: Color = ColorDarkTokens.InverseSurface,
//inverseOnSurface: Color = ColorDarkTokens.InverseOnSurface,
//error: Color = ColorDarkTokens.Error,
//onError: Color = ColorDarkTokens.OnError,
//errorContainer: Color = ColorDarkTokens.ErrorContainer,
//onErrorContainer: Color = ColorDarkTokens.OnErrorContainer,
//outline: Color = ColorDarkTokens.Outline,
//outlineVariant: Color = ColorDarkTokens.OutlineVariant,
//scrim: Color = ColorDarkTokens.Scrim,
//surfaceBright: Color = ColorDarkTokens.SurfaceBright,
//surfaceContainer: Color = ColorDarkTokens.SurfaceContainer,
//surfaceContainerHigh: Color = ColorDarkTokens.SurfaceContainerHigh,
//surfaceContainerHighest: Color = ColorDarkTokens.SurfaceContainerHighest,
//surfaceContainerLow: Color = ColorDarkTokens.SurfaceContainerLow,
//surfaceContainerLowest: Color = ColorDarkTokens.SurfaceContainerLowest,
//surfaceDim: Color = ColorDarkTokens.SurfaceDim,

val DarkColorScheme = darkColorScheme(
    primary = Color.DarkPrimary,
    onPrimary = Color.DarkOnPrimary,
    primaryContainer = Color.DarkPrimaryContainer,
    onPrimaryContainer = Color.DarkOnPrimaryContainer,
    inversePrimary = Color.DarkInversePrimary,
    secondary = Color.DarkSecondary,
    onSecondary = Color.DarkOnSecondary,
    secondaryContainer = Color.DarkSecondaryContainer,
    onSecondaryContainer = Color.DarkOnSecondaryContainer,
    tertiary = Color.DarkTertiary,
    onTertiary = Color.DarkOnTertiary,
    tertiaryContainer = Color.DarkTertiaryContainer,
    onTertiaryContainer = Color.DarkOnTertiaryContainer,
    background = Color.DarkBackground,
    onBackground = Color.DarkOnBackground,
    surface = Color.DarkSurface,
    onSurface = Color.DarkOnSurface,
    surfaceVariant = Color.DarkSurfaceVariant,
    onSurfaceVariant = Color.DarkOnSurfaceVariant,
    surfaceTint = Color.DarkSurfaceTint,
    inverseSurface = Color.DarkInverseSurface,
    inverseOnSurface = Color.DarkInverseOnSurface,
    error = Color.DarkError,
    onError = Color.DarkOnError,
    errorContainer = Color.DarkErrorContainer,
    onErrorContainer = Color.DarkOnErrorContainer,
    outline = Color.DarkOutline,
    outlineVariant = Color.DarkOutlineVariant,
    scrim = Color.DarkScrim,
)

val LightColorScheme = lightColorScheme(
    primary = Color.LightPrimary,
    onPrimary = Color.LightOnPrimary,
    primaryContainer = Color.LightPrimaryContainer,
    onPrimaryContainer = Color.LightOnPrimaryContainer,
    inversePrimary = Color.LightInversePrimary,
    secondary = Color.LightSecondary,
    onSecondary = Color.LightOnSecondary,
    secondaryContainer = Color.LightSecondaryContainer,
    onSecondaryContainer = Color.LightOnSecondaryContainer,
    tertiary = Color.LightTertiary,
    onTertiary = Color.LightOnTertiary,
    tertiaryContainer = Color.LightTertiaryContainer,
    onTertiaryContainer = Color.LightOnTertiaryContainer,
    background = Color.LightBackground,
    onBackground = Color.LightOnBackground,
    surface = Color.LightSurface,
    onSurface = Color.LightOnSurface,
    surfaceVariant = Color.LightSurfaceVariant,
    onSurfaceVariant = Color.LightOnSurfaceVariant,
    surfaceTint = Color.LightSurfaceTint,
    inverseSurface = Color.LightInverseSurface,
    inverseOnSurface = Color.LightInverseOnSurface,
    error = Color.LightError,
    onError = Color.LightOnError,
    errorContainer = Color.LightErrorContainer,
    onErrorContainer = Color.LightOnErrorContainer,
    outline = Color.LightOutline,
    outlineVariant = Color.LightOutlineVariant,
    scrim = Color.LightScrim,
)