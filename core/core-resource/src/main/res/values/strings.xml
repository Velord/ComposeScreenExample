<resources>
    <string name="app_name">ComposeScreenExample</string>
    <string name="camera">Camera</string>
    <string name="demo">Demo</string>
    <string name="settings">Settings</string>
    <string name="press_again_to_exit">Press again to exit</string>
    <string name="go_to_app_settings">Go to App Settings</string>
    <string name="decline">Decline</string>
    <string name="require_microphone_permission">Require microphone permission</string>
    <string name="require_camera_permission">Require camera permission</string>
    <string name="give_access_to_microphone">Give access to microphone to proceed</string>
    <string name="give_access_to_camera">Give access to camera to proceed</string>
    <string name="can_not_get_permission_for_mic">Can not get permission for Microphone, seems like you declined it. Click to check again</string>
    <string name="can_not_get_permission_for_camera">Can not get permission for Camera, seems like you declined it. Click to check again</string>
    <string name="open_new">Open new</string>
    <string name="open_new_camera">Open new Camera</string>
    <string name="test">Test</string>
    <string name="open_shape_demo">Open Shape Demo</string>
    <string name="open_modifier_demo">Open Modifier Demo</string>
    <string name="open_flow_summator">Open Flow Summator</string>
    <string name="open_morph_demo">Open Morph Demo</string>
    <string name="open_hint_phone_number">Open Hint Phone Number</string>
    <string name="flow_summator">Flow Summator</string>
    <string name="launch">Launch</string>
    <string name="please_enter_the_number">Please, enter the number</string>
    <string name="info_description_flow_summator">Develop Flow that sums values of other flows.
        \n"     "1. UI - must consist of 3 items. Enter field, ‘launch’ Button and Text field for output. On press ‘launch’ app handle N - digit has been entered in the Enter field. Result of the work should be rendered to the Text field. Every new update should be on the new line.
        \n"     "2. It is necessary to create an array of Flow of Int of N. Each after a delay of (index + 1) * 100, emits the value index + 1. I.e. Flow with index 0 emits value 1 with delay 100, Flow with index 1 emits value 2 with delay 200.
        \n"     "3. The resulting Flow must sum the values of all N Flows. The summing Flow must return a value after updating each of the N Flows.
        \nImportant: The value on the screen must be added every 100ms.
        \n
        \nExample:
        \nN entered: 1
        \nResult: 1
        \n
        \nN entered: 2
        \nResult: 1\n3
        \n
        \nN entered: 3
        \nResult: 1\n3\n6
        \n
        \nN entered: 7
        \nResult: 1\n3\n6\n10\n15\n21\n28
    </string>
    <string name="abide_to_os_theme">Abide to Os theme</string>
    <string name="os_does_not_support_theme_switching">Os does not support theme switching on Android 8 and below\nProbably you have \'Invert colors\' in Quick Settings represented as Tile</string>
    <string name="use_dark_theme">Use Dark Theme</string>
    <string name="use_system_dynamic_theme">Use System Dynamic Theme</string>
    <string name="not_available_on_android_11">Not available on Android 11 and below</string>
    <string name="disable_os_theme_switcher_first">Disable Os theme switcher first</string>
    <string name="error">Error</string>
    <string name="loading">Loading</string>
    <string name="count">Count: %d</string>
    <string name="counter_widget">Counter Widget</string>
    <string name="plus_sign">+</string>
    <string name="minus_sign">-</string>
    <string name="refresh">Refresh Image</string>
    <string name="widget_size">Widget Size:\nW: %1f x H: %2f</string>
    <string name="image_widget">Image Widget</string>
    <string name="downloaded_from">Downloaded from:\n%s</string>
    <string name="rear">Rear</string>
    <string name="front">Front</string>
    <string name="waiting">Waiting</string>
    <string name="invoke_again">Invoke again</string>
    <string name="all">All</string>
    <string name="favorite">Favorite</string>
    <string name="sort_by">Sort by</string>
    <string name="sort_by_date_ascending">Sort by date ascending</string>
    <string name="sort_by_date_descending">Sort by date descending</string>
    <string name="filter_by">Filter by</string>
    <string name="filter_by_rating">Filter by rating</string>
    <string name="filter_by_vote_count">Filter by vote count</string>
    <string name="open_movie">Open Movie</string>
    <string name="all_movies">All movies with this filters are loaded</string>
    <string name="info_description_movie">Test Task for android candidates\n
\n
\nWrite the application that allows user to review the list of movies and add them to favorites. You should provide your solution as a link to public repository. Please make commits of logical units, so we can evaluate your progress and add comments as you see fit.
\n
\nFunctional requirements:
\n\nThe main screen contains two tabs: All and Favorites.
\nTab All should display a list of movies with pagination.
 \nMovies should be grouped by month (take a look at design example)
\nTab Favorites should display a list of bookmarked movies.
\nUser can add / remove movie to / from his favorites.
\nAll changes should be visible immediately on both tabs.
\nBookmarks can be saved localy (without api call).
\nUser can refresh movies list using pull-to-refresh.
\nUser can see early loaded content without internet connection (only 1st page, without pagination)
\n\nMovies list filter:
\n
\nvote average: 7+
\nvote count: 100+
\nsorted by primary release date, the newest movies should appear at the top of list
\n\nScreen UI should display one of the following states:
\n
\nLoading
\nRefreshing
\nLoading More (pagination)
\nError
\nContent (just showing movies)
\n\nOptional Requirements
\nImplement sign-in with Google or Facebook
\nImplement movie sharing via any existing provider
\nTechnical requirements
\nKotlin is required
\nSqlite / Room is required
\nOne of MVVM / MVI / Redux architecture is required;
\nClean Architecture is required;
\nDependency injection is required;
\nJetpack Compose is required
\nUnit-tests are required;
\n\nNotes
\n\nYour code should be testable, scalable and flexible
\nThe most important parts of logic should be covered with unit tests (you are free to decide what parts)
\nYou are free to use any libraries
\nYou are free to implement your own design
\nMake sure that anyone can build your project.
    </string>
    <string name="range">Range: %1s</string>
    <string name="info_description_movie_url">https://github.com/AppSci/android-test-task?tab=readme-ov-file</string>
    <string name="open_dialog">Open Dialog Demo</string>
    <string name="this_demo_is_deprecated">This demo is Deprecated on this navigation lib: %s</string>
    <string name="cancel">Cancel</string>
    <string name="confirm">Confirm</string>
    <string name="ok">Ok</string>
    <string name="show_two_buttons_dialog">Show two buttons dialog</string>
    <string name="show_one_button_dialog">Show one button dialog</string>
</resources>